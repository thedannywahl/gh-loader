!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";const t={version:"4.0.1"};gh.debug=!1;const e=(...t)=>{if(gh.debug){const[o,...r]=t,n="string"==typeof(e=o)&&["log","warn","error","info","group","groupCollapsed","groupEnd"].includes(e)?o:"log",s="object"==typeof o?[JSON.stringify(o),...r]:[o,...r],i=(t=>console[t]||console.log)(n);"group"===n||"groupCollapsed"===n?i(...r):"groupEnd"===n?console.groupEnd():i(...s)}var e},o=async({data:t,name:o,id:r,type:n,isTruncated:s=!1})=>{const{status:i,color:c,ext:a}=(t=>{var e;const o="string"==typeof t&&t.includes(".")&&(null==(e=t.split(".").pop())?void 0:e.toLowerCase())||"";return{status:"js"===o||"css"===o?"Loading":"Skipping",color:"js"===o||"css"===o?"green":"gray",ext:o}})(o);e("groupCollapsed",...[`%c${i} %cfile '${o}' from ${n} '${r}'`,`color: ${c}; font-weight: normal`,"font-weight: normal"]),"js"!==a&&"css"!==a?e("Source:",t):(({content:t,raw_url:o,type:r="inline",source:n="gist",tag:s="script",attributes:i={},async:c=!1,defer:a=!1})=>{e(`Type: ${r} ${s}`,"Source:",{content:t,raw_url:o});const l="inline"===r?s:"script"===s?"script":"link",p=document.createElement(l);if("inline"===r)p.textContent=t,"style"===s&&p.setAttribute("type","text/css");else{const e="gist"===n?o.replace("gist.githubusercontent","gistcdn.githack"):`https://rawcdn.githack.com/${t}`,r="script"===s?"src":"href";p.setAttribute(r,e),"style"===s&&p.setAttribute("rel","stylesheet")}for(const[e,u]of Object.entries(i))p.setAttribute(e,u);"script"===s&&(c&&p.setAttribute("async","true"),a&&p.setAttribute("defer","true")),e(`${s.charAt(0).toUpperCase()+s.slice(1)} Element:`,p),("script"===s?document.body:document.head).appendChild(p)})({content:t,raw_url:t,type:s?"remote":"inline",source:n,tag:"js"===a?"script":"style",attributes:{"data-gh-id":r,"data-gh-file":o,"data-gh-type":s?"remote":"inline","data-gh-source":n}}),e("groupEnd")},r=async({source:t,isRepo:r=!1})=>{if(r){const e=t.replace(/^\//,"").replace("blob/",""),[r,n,...s]=e.split("/"),i=s.pop()||"",c={content:s.join("/")};await o({data:c.content,name:i,id:`${r}/${n}`,type:"repo",isTruncated:!0})}else try{const e=await fetch(`https://api.github.com/gists/${t}`),r=(await e.json()).files;for(const[n,s]of Object.entries(r))await o({data:s.content,name:n,id:t,type:"gist",isTruncated:s.truncated})}catch(n){e("error",`Failed to fetch gist ${t}:`,n)}};(async o=>{const{version:n}=t;if(e("group",`%cgh-loader ${n}`,"color: inherit; font-weight: bold;"),Array.isArray(o)&&0===o.length)return void e("warn","No Gist ID or repository file path provided.");const s=Array.isArray(o)?o:[o];for(const t of s)await r({source:t,isRepo:t.includes("/")});e("groupEnd")})("thedannywahl/gh-loader/blob/main/public/default.js")}));
