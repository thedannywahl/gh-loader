const version="4.0.0",packageJSON={version:"4.0.0"};gh.debug=!1;const getLogMethod=t=>console[t]||console.log,isConsole=t=>"string"==typeof t&&["log","warn","error","info","group","groupCollapsed","groupEnd"].includes(t),log=(...t)=>{if(gh.debug){const[e,...o]=t,s=isConsole(e)?e:"log",r="object"==typeof e?[JSON.stringify(e),...o]:[e,...o],n=getLogMethod(s);"group"===s||"groupCollapsed"===s?n(...r):"groupEnd"===s?console.groupEnd():n(...r)}},insert=({content:t,raw_url:e,type:o="inline",source:s="gist",tag:r="script",attributes:n={},async:i=!1,defer:c=!1})=>{log(`Type: ${o} ${r}`,"Source:",{content:t,raw_url:e});const a="inline"===o?r:"script"===r?"script":"link",l=document.createElement(a);if("inline"===o)l.textContent=t,"style"===r&&l.setAttribute("type","text/css");else{const o="gist"===s?e.replace("gist.githubusercontent","gistcdn.githack"):`https://rawcdn.githack.com/${t}`,n="script"===r?"src":"href";l.setAttribute(n,o),"style"===r&&l.setAttribute("rel","stylesheet")}for(const[t,e]of Object.entries(n))l.setAttribute(t,e);"script"===r&&(i&&l.setAttribute("async","true"),c&&l.setAttribute("defer","true")),log(`${r.charAt(0).toUpperCase()+r.slice(1)} Element:`,l);("script"===r?document.body:document.head).appendChild(l)},getFileInfo=t=>{var e;const o="string"==typeof t&&t.includes(".")&&(null==(e=t.split(".").pop())?void 0:e.toLowerCase())||"";return{status:"js"===o||"css"===o?"Loading":"Skipping",color:"js"===o||"css"===o?"green":"gray",ext:o}},processFile=async({data:t,name:e,id:o,type:s,isTruncated:r=!1})=>{const{status:n,color:i,ext:c}=getFileInfo(e);log("groupCollapsed",...[`%c${n} %cfile '${e}' from ${s} '${o}'`,`color: ${i}; font-weight: normal`,"font-weight: normal"]),"js"!==c&&"css"!==c?log("Source:",t):insert({content:t,raw_url:t,type:r?"remote":"inline",source:s,tag:"js"===c?"script":"style",attributes:{"data-gh-id":o,"data-gh-file":e,"data-gh-type":r?"remote":"inline","data-gh-source":s}}),log("groupEnd")},process=async({source:t,isRepo:e=!1})=>{if(e){const e=t.replace(/^\//,"").replace("blob/",""),[o,s,...r]=e.split("/"),n=r.pop()||"",i={content:r.join("/")};await processFile({data:i.content,name:n,id:`${o}/${s}`,type:"repo",isTruncated:!0})}else try{const e=await fetch(`https://api.github.com/gists/${t}`),o=(await e.json()).files;for(const[e,s]of Object.entries(o))await processFile({data:s.content,name:e,id:t,type:"gist",isTruncated:s.truncated})}catch(e){log("error",`Failed to fetch gist ${t}:`,e)}},load=async t=>{const{version:e}=packageJSON;if(log("group",`%cgh-loader ${e}`,"font-weight: bold"),Array.isArray(t)&&0===t.length)return void log("warn","No Gist ID or repository file path provided.");const o=Array.isArray(t)?t:[t];for(const t of o)await process({source:t,isRepo:t.includes("/")});log("groupEnd")};load("thedannywahl/gh-loader/blob/main/public/default.js");